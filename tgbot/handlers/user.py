import aiohttp
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import Message

from tgbot.keyboards.reply import keyboard
from tgbot.misc.states import ConvertCurrencyStates


async def cmd_start(message: types.Message):

    await message.answer("–ü—Ä–∏–≤—ñ—Çüëãüèª! –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤–∞–ª—é—Ç.\n/convert: –ø–æ—á–∞—Ç–∏ –∫–æ–≤–µ—Ä—Ç—É–≤–∞—Ç–∏\n–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç:\nUSD$ - –¥–æ–ª–∞—Ä–∏\nUAH‚Ç¥ -- –≥—Ä–∏–≤–Ω—ñ\nEUR‚Ç¨ -- –Ñ–≤—Ä–æ\nPLN -- –≥—Ä–æ—à(–ø–æ–ª—å—â–∞)\nRUB -- —Ä—É–±–ª—ñ\nGBP -- –ø–µ–Ω–Ω—ñ(–í–µ–ª–∏–∫–∞ –ë—Ä–∏—Ç–∞–Ω—ñ—è)\nBYN -- –∫–æ–ø—ñ–π–∫–∞(–±—ñ–ª–æ—Ä—É—Å—å)\nKGS -- –∫–∏—Ä–≥–∏–∑—å–∫–∏–π —Å–æ–º\nCNY -- –∫–∏—Ç–∞–π—Å—å–∫–∏–π —é–∞–Ω—å", reply_markup=keyboard)



async def cmd_help(message: types.Message):
    await message.answer("–ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –¥–æ –∞–¥–º—ñ–Ω–∞: @qwerix_fort")





async def cmd_convert(message: types.Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∏—Ö—ñ–¥–Ω—É –≤–∞–ª—é—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, USD):")
    await ConvertCurrencyStates.waiting_for_source_currency.set()




async def process_source_currency(message: types.Message, state: FSMContext):
    source_currency = message.text.upper()

    await state.update_data(source_currency=source_currency)

    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª—å–æ–≤—É –≤–∞–ª—é—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, EUR):")
    await ConvertCurrencyStates.waiting_for_target_currency.set()




async def process_target_currency(message: types.Message, state: FSMContext):
    target_currency = message.text.upper()

    await state.update_data(target_currency=target_currency)

    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å—É–º–º—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:")
    await ConvertCurrencyStates.waiting_for_amount.set()




async def process_amount(message: types.Message, state: FSMContext):
    amount = message.text

    data = await state.get_data()
    source_currency = data['source_currency']
    target_currency = data['target_currency']

    try:
        url = f"https://api.exchangerate-api.com/v4/latest/{source_currency}"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                data = await response.json()

        conversion_rate = data['rates'][target_currency]
        converted_amount = float(amount) * conversion_rate

        await message.answer(f"‚úÖ–í–∏–∫–æ–Ω–∞–Ω–æ‚úÖ:\n{amount} {source_currency} = {converted_amount} {target_currency}")
    except (Exception,KeyError):
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤–∞–ª—é—Ç")

    await state.finish()


def register_user(dp: Dispatcher):
    dp.register_message_handler(cmd_start,Command("start"))
    dp.register_message_handler(cmd_help,Command("help"))
    dp.register_message_handler(cmd_convert,Command("convert"))
    dp.register_message_handler(process_source_currency,state=ConvertCurrencyStates.waiting_for_source_currency)
    dp.register_message_handler(process_target_currency,state=ConvertCurrencyStates.waiting_for_target_currency)
    dp.register_message_handler(process_amount,state=ConvertCurrencyStates.waiting_for_amount)

